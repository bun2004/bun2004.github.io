[{"categories":null,"contents":" 由於資訊科技的普及化，Fintech 在未來將會是一大趨勢，傳統金融市場將走入下坡，金融資訊也將帶來好處與新興議題。\n API的應用與探討\n  行動支付\n ","permalink":"https://bun2004.github.io/blog/post-3/","tags":null,"title":"fintech的發展趨勢與現況"},{"categories":null,"contents":" 行動支付不管是創立軟體或者支援方在生活中也越來越普及化，只要是現在平時可說是人手一台智慧型手機，並且實體的金錢、悠遊卡或者是金融卡都帶給人們實體上的不便，所以行動支付零錢包漸漸在許多公司開始創立，像是LINE零錢包、歐富寶和APPLE PAY，都是在生活當中較便利且無形的交易行為。\n","permalink":"https://bun2004.github.io/blog/post-5/","tags":null,"title":"行動支付"},{"categories":null,"contents":" 我是alan，這是我利用python來做出撲克牌21點遊戲，玩家可遵循指引和電腦莊家有所交流 在未來我可以寫入更多的規則，並且更新一些需要改進的地方也可以撰寫更多新的遊戲來增加我撰寫程式的經驗。\n 我的python作品\n ","permalink":"https://bun2004.github.io/blog/post-1/","tags":["Photos","Game","React","Python","New"],"title":"alan的python作品"},{"categories":null,"contents":" API在近年的使用率愈來愈多，而最早開發API大抵上是專門以服務第三方的開發團隊做為目的，舉例來說，像是我們會用 Facebook 提供的 Graph API ，來存取 Facebook 為了其應用程式開發者而提供的各種服務，或是利用 Google開放的 YouTube API ，來存取 YouTube 上的資料；不過，另一方面，即使是開發同一個產品或服務的團隊，也可能在開發產品或服務的過程中，設計並開發出一些 API，其原始的目的與考量，不見得是為了供第三方使用，而是為了自身在開發產品或服務使用。\n金融結合API\n近年來網上購物可說是取代了實體店面，尤其是疫情的影響讓民眾更需要依賴網路消費，而應用軟體在結帳時可藉由API的服務使得程式軟體能夠容易取得買家的個資，讓買家可在APP裡進行銀行支付的行為，不僅提升買賣交易並且使民眾更方便。\n不過這樣的消費模式也帶給APP新的挑戰，由於銀行提供的API使軟體取得消費者的個資，所以軟體要確保的是不能夠洩漏消費者的個資，不僅要讓消費者勾選同意個資的合約書，也要負起法律責任。\n","permalink":"https://bun2004.github.io/blog/post-4/","tags":null,"title":"API運用大抵"},{"categories":null,"contents":"import random def printcard(c):  for i in c:  if i //13==0:  print(chr(9824),end=\u0026#34;\u0026#34;)  elif i //13==1:  print(chr(9829),end=\u0026#34;\u0026#34;)  elif i//13==2:  print(chr(9830),end=\u0026#34;\u0026#34;)  else:  print(chr(9827),end=\u0026#34;\u0026#34;)  if i%13==0:  print(\u0026#34;A\u0026#34;,end=\u0026#34; \u0026#34;)  elif i%13==10:  print(\u0026#34;J\u0026#34;,end=\u0026#34; \u0026#34;)  elif i%13==11:  print(\u0026#34;Q\u0026#34;,end=\u0026#34; \u0026#34;)  elif i%13==12:  print(\u0026#34;K\u0026#34;,end=\u0026#34; \u0026#34;)  else:  print(i%13+1,end=\u0026#34; \u0026#34;)  print()    def printmassage():  print(\u0026#34;玩家的排:\u0026#34;,end=\u0026#34;\u0026#34;)  printcard(playercard)  print(\u0026#34;玩家的牌面點數:\u0026#34;,sum(playerpoint))  print(\u0026#34;莊家的排:\u0026#34;,end=\u0026#34;\u0026#34;)  printcard(bankercard)  print(\u0026#34;裝家的排面點數:\u0026#34;,sum(bankerpoint))  print(\u0026#34;***********************************************\u0026#34;)     def cardpoint(x):  if x%13==0:  return 11  elif x%13\u0026gt;9:  return 10  else:  return x%13+1  def deal(gamercard,gamerpoint):  temp=card.pop()  gamercard.append(temp)  gamerpoint.append(cardpoint(temp))  card=list(range(0,52)) random.shuffle(card)  playercard=list() playerpoint=list() bankercard=list() bankerpoint=list()  for i in range(2):  deal(playercard,playerpoint) deal(bankercard,bankerpoint)  printmassage()   while True:  ans=input(\u0026#34;玩家要加牌嗎(Y/N)?:\u0026#34;)  if ans==\u0026#34;N\u0026#34; or ans==\u0026#34;n\u0026#34;:  break  deal(playercard,playerpoint)  if sum(playerpoint)\u0026gt;21:  if 11 in playerpoint:  playerpoint[playerpoint.index(11)]=1  printmassage()  else:  printmassage()  print(\u0026#34;玩家爆牌，莊家獲勝\u0026#34;)  break  else:  printmassage() if sum(playerpoint)\u0026lt;22:  while sum(bankerpoint)\u0026lt;17:  deal(bankercard,bankerpoint)  if sum(bankerpoint)\u0026gt;21:  if 11 in bankerpoint:  bankerpoint[bankerpoint.index(11)]=1  printmassage()  if sum(bankerpoint)\u0026gt;21:  print(\u0026#34;莊家爆牌，玩家勝利\u0026#34;)  elif sum(playerpoint)\u0026gt;sum(bankerpoint):  print(\u0026#34;玩家勝利\u0026#34;)  elif sum(playerpoint)\u0026lt;sum(bankerpoint):  print(\u0026#34;莊家勝利\u0026#34;)  elif sum(playerpoint) == sum(bankerpoint):  print(\u0026#34;和局\u0026#34;) ","permalink":"https://bun2004.github.io/blog/post-2/","tags":null,"title":""}]